name: Aos virtual machine build
on:
  workflow_dispatch:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-*"

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.version.outputs.tag }}
      version: ${{ steps.version.outputs.version }}
      release_date: ${{ steps.version.outputs.release_date }}

    steps:
      - name: Set release version
        id: version
        run: |
          tag=$(basename "${{ github.ref }}")
          version=${tag#"v"}
          release_date="$(date -I)"

          echo "Release tag:     $tag"
          echo "Release version: $version"
          echo "Release date:    $release_date"

          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "release_date=$release_date" >> $GITHUB_OUTPUT

      - name: Draft release
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}

        run: |
          tag="${{ steps.version.outputs.tag }}"
          version="${{ steps.version.outputs.version }}"

          gh release create --draft "$tag" --title "Version $version"

  build:
    name: Build
    runs-on: github-arc-x64-dind
    needs: [prepare]
    strategy:
      fail-fast: false
      matrix:
        # Keep only genericx86-64 for now. The list of supported machines:
        # genericx86-64, qemux86-64, genericarm64, qemuarm64
        machine: [genericx86-64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: aosedge/meta-aos-vm
          fetch-depth: 0

      - name: Install gh
        uses: ./.github/workflows/common

      - name: Build
        run: |
          tag="${{needs.prepare.outputs.tag }}"
          version="${{ needs.prepare.outputs.version }}"
          prev_tag=$(git describe --tags --abbrev=0 "${tag}"^ || true)
          prev_version=${prev_tag#"v"}
          machine="${{ matrix.machine }}"

          echo "Current version:  $version"
          echo "Previous version: $prev_version"
          echo "Machine:          $machine"

          mkdir build
          cp aos-vm.yaml build/

          sed -i "s/BUNDLE_IMAGE_VERSION: \"[^\"]*\"/BUNDLE_IMAGE_VERSION: \"$version\"/" build/aos-vm.yaml
          sed -i "s/ROOTFS_REF_VERSION: \"[^\"]*\"/ROOTFS_REF_VERSION: \"$prev_version\"/" build/aos-vm.yaml

          docker/build_docker.sh -f docker/Dockerfile

          echo "Build main node artifacts"

          docker/run_docker.sh -n -w build -- moulin aos-vm.yaml --NODE_TYPE=main --MACHINE="$machine" \
            --CACHE_LOCATION=inside

          docker/run_docker.sh -n -w build -- ninja "main-${machine}.img"
          docker/run_docker.sh -n -w build -- ninja layers
          docker/run_docker.sh -n -w build -- ninja fota-full

          docker/run_docker.sh -n -w build -- moulin aos-vm.yaml --NODE_TYPE=main --MACHINE="$machine" \
            --WITH_MESSAGE_PROXY=yes --CACHE_LOCATION=inside

          docker/run_docker.sh -n -w build -- ninja aos-sdk

          echo "Build secondary node artifacts"

          docker/run_docker.sh -n -w build -- moulin aos-vm.yaml --NODE_TYPE=secondary --MACHINE="$machine" \
            --CACHE_LOCATION=inside
          docker/run_docker.sh -n -w build -- ninja "secondary-${machine}.img"
          docker/run_docker.sh -n -w build -- ninja fota-full

          echo "Archive image"

          sudo apt-get install -y xz-utils qemu-utils

          cd build

          yocto/meta-aos-vm/scripts/aos_vm.sh archive -m -s 1 --machine "${machine}" -d vmdk -c xz \
            -o output/image -f "aos-vm-image-${machine}-${version}"

      - name: Deploy
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}

        run: |
          tag="${{needs.prepare.outputs.tag }}"
          version="${{ needs.prepare.outputs.version }}"
          machine="${{ matrix.machine }}"

          echo "Deploy artifacts"

          for file in build/output/image/*; do
            gh release upload "$tag" "$file"
          done


          for file in build/output/layers/*; do
            gh release upload "$tag" "$file"
          done

          for file in build/output/fota/*; do
            gh release upload "$tag" "$file"
          done

          for file in build/output/sdk/*.sh; do
            gh release upload "$tag" "$file"
          done

          if [ "$machine" = "genericx86-64" ]; then
            gh release upload "$tag" scripts/aos_vm.sh
            gh release upload "$tag" misc/unitconfig.json
          fi

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [prepare, build]
    env:
      GH_TOKEN: ${{ github.token }}
      GH_REPO: ${{ github.repository }}

    steps:
      - name: Release
        run: |
          tag="${{needs.prepare.outputs.tag }}"
          version="${{ needs.prepare.outputs.version }}"

          echo "Release version: $version"

          if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            gh release edit "$tag" --prerelease
          fi

          gh release edit "$tag" --draft=false

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: ${{ always() && (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}
    env:
      GH_TOKEN: ${{ github.token }}
      GH_REPO: ${{ github.repository }}

    steps:
      - name: Cleanup
        run: |
          tag="${{needs.prepare.outputs.tag }}"
          version="${{ needs.prepare.outputs.version }}"

          echo "Cleanup version: $version"

          gh release delete "$tag" -y
